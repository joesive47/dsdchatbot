from flask import Flask, jsonify, request, render_template, redirect, url_for, flash, session, send_file
from flask_cors import CORS
import sqlite3
import pandas as pd
import os
from datetime import datetime
from werkzeug.utils import secure_filename
import io
import csv
from functools import wraps

app = Flask(__name__)
CORS(app)

# Configuration
app.secret_key = os.environ.get('SECRET_KEY', 'railway-dsd-chatbot-secret-key-2024')
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB limit

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Database initialization
def init_db():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    conn = sqlite3.connect('chatbot.db')
    cursor = conn.cursor()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á categories
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á questions
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER NOT NULL,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (category_id) REFERENCES categories (id)
        )
    ''')
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    default_categories = [
        '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 
        '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
        '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠',
        '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ'
    ]
    
    for category in default_categories:
        cursor.execute('INSERT OR IGNORE INTO categories (name) VALUES (?)', (category,))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    default_questions = [
        (1, '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö DSD Chatbot ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢ Railway! üöÇ'),
        (1, 'hello', 'Hello! Welcome to DSD Chatbot powered by Railway! üöÄ'),
        (2, '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á', '‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢:\n- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Python\n- ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UI/UX\n- ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n- ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå\n- ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•'),
        (3, '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£:\n- ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: 2,500-5,000 ‡∏ö‡∏≤‡∏ó\n- ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á: 5,000-8,000 ‡∏ö‡∏≤‡∏ó\n- ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á: 8,000-12,000 ‡∏ö‡∏≤‡∏ó'),
        (2, '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ:\n1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à\n2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"\n3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n4. ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n5. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'),
        (4, '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:\nüìû ‡πÇ‡∏ó‡∏£: 02-123-4567\nüìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: info@dsdchatbot.com\nüí¨ Line: @dsdsupport\nüïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 9:00-18:00'),
        (5, 'railway ‡∏ó‡∏î‡∏™‡∏≠‡∏ö', '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! Railway ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ üöÇ ‡πÑ‡∏°‡πà‡∏°‡∏µ cold start ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å!'),
        (5, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö railway', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å Railway! üöÇ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:\n‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ cold start\n‚úÖ ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß\n‚úÖ SSL ‡∏ü‡∏£‡∏µ\n‚úÖ Deploy ‡∏á‡πà‡∏≤‡∏¢\n\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≠‡∏î 24/7!'),
        (1, '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì', '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ üòä'),
        (1, 'thank you', 'You\'re welcome! Feel free to ask anytime! üòä')
    ]
    
    for question_data in default_questions:
        cursor.execute('''
            INSERT OR IGNORE INTO questions (category_id, question, answer) 
            VALUES (?, ?, ?)
        ''', question_data)
    
    conn.commit()
    conn.close()

# Authentication decorator
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'logged_in' not in session or not session['logged_in']:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Database helper functions
def get_db_connection():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = sqlite3.connect('chatbot.db')
    conn.row_factory = sqlite3.Row
    return conn

def get_all_categories():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    conn = get_db_connection()
    categories = conn.execute('SELECT * FROM categories ORDER BY name').fetchall()
    conn.close()
    return categories

def get_all_questions(search=None, category_id=None):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    conn = get_db_connection()
    
    query = '''
        SELECT q.*, c.name as category_name 
        FROM questions q 
        JOIN categories c ON q.category_id = c.id 
    '''
    params = []
    conditions = []
    
    if search:
        conditions.append('(q.question LIKE ? OR q.answer LIKE ?)')
        params.extend([f'%{search}%', f'%{search}%'])
    
    if category_id and category_id != 'all':
        conditions.append('q.category_id = ?')
        params.append(category_id)
    
    if conditions:
        query += ' WHERE ' + ' AND '.join(conditions)
    
    query += ' ORDER BY q.updated_at DESC'
    
    questions = conn.execute(query, params).fetchall()
    conn.close()
    return questions

def find_answer(user_input):
    """‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = get_db_connection()
    user_input_lower = user_input.lower()
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    exact_match = conn.execute(
        'SELECT answer FROM questions WHERE LOWER(question) = ?', 
        (user_input_lower,)
    ).fetchone()
    
    if exact_match:
        conn.close()
        return exact_match['answer']
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    keyword_match = conn.execute(
        'SELECT answer FROM questions WHERE LOWER(question) LIKE ? ORDER BY LENGTH(question) LIMIT 1', 
        (f'%{user_input_lower}%',)
    ).fetchone()
    
    if keyword_match:
        conn.close()
        return keyword_match['answer']
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    answer_match = conn.execute(
        'SELECT answer FROM questions WHERE LOWER(answer) LIKE ? LIMIT 1', 
        (f'%{user_input_lower}%',)
    ).fetchone()
    
    if answer_match:
        conn.close()
        return answer_match['answer']
    
    conn.close()
    return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üòÖ\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤:\n- "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"\n- "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"\n- "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà"\n- "railway ‡∏ó‡∏î‡∏™‡∏≠‡∏ö"\n\nüöÇ Powered by Railway'

# Routes

@app.route('/')
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API"""
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Admin"""
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo)
        if username == 'admin' and password == 'admin123':
            session['logged_in'] = True
            session['username'] = username
            flash('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
            return redirect(url_for('admin_dashboard'))
        else:
            flash('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"""
    session.clear()
    flash('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß')
    return redirect(url_for('home'))

@app.route('/admin')
@login_required
def admin_dashboard():
    """‡∏´‡∏ô‡πâ‡∏≤ Dashboard Admin"""
    conn = get_db_connection()
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    total_questions = conn.execute('SELECT COUNT(*) as count FROM questions').fetchone()['count']
    total_categories = conn.execute('SELECT COUNT(*) as count FROM categories').fetchone()['count']
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    categories = get_all_categories()
    
    conn.close()
    
    return render_template('admin.html', 
                         total_questions=total_questions,
                         total_categories=total_categories,
                         categories=categories)

@app.route('/questions')
@login_required
def manage_questions():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    search = request.args.get('search', '')
    category_filter = request.args.get('category', 'all')
    
    questions = get_all_questions(search, category_filter if category_filter != 'all' else None)
    categories = get_all_categories()
    
    return render_template('questions.html', 
                         questions=questions, 
                         categories=categories,
                         search=search,
                         category_filter=category_filter)

@app.route('/add_category', methods=['POST'])
@login_required
def add_category():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà"""
    category_name = request.form.get('category_name', '').strip()
    
    if not category_name:
        flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
        return redirect(url_for('admin_dashboard'))
    
    try:
        conn = get_db_connection()
        conn.execute('INSERT INTO categories (name) VALUES (?)', (category_name,))
        conn.commit()
        conn.close()
        flash(f'‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "{category_name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
    except sqlite3.IntegrityError:
        flash('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
    
    return redirect(url_for('admin_dashboard'))

@app.route('/add_question', methods=['POST'])
@login_required
def add_question():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà"""
    category_id = request.form.get('category_id')
    question = request.form.get('question', '').strip()
    answer = request.form.get('answer', '').strip()
    
    if not all([category_id, question, answer]):
        flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
        return redirect(url_for('admin_dashboard'))
    
    try:
        conn = get_db_connection()
        conn.execute('''
            INSERT INTO questions (category_id, question, answer) 
            VALUES (?, ?, ?)
        ''', (category_id, question, answer))
        conn.commit()
        conn.close()
        flash('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}')
    
    return redirect(url_for('admin_dashboard'))

@app.route('/edit_question/<int:question_id>')
@login_required
def edit_question(question_id):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    conn = get_db_connection()
    question = conn.execute('SELECT * FROM questions WHERE id = ?', (question_id,)).fetchone()
    categories = get_all_categories()
    conn.close()
    
    if not question:
        flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç')
        return redirect(url_for('manage_questions'))
    
    return render_template('edit_questions.html', question=question, categories=categories)

@app.route('/edit_question/<int:question_id>', methods=['POST'])
@login_required
def update_question(question_id):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    category_id = request.form.get('category_id')
    question = request.form.get('question', '').strip()
    answer = request.form.get('answer', '').strip()
    
    if not all([category_id, question, answer]):
        flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
        return redirect(url_for('edit_question', question_id=question_id))
    
    try:
        conn = get_db_connection()
        conn.execute('''
            UPDATE questions 
            SET category_id = ?, question = ?, answer = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (category_id, question, answer, question_id))
        conn.commit()
        conn.close()
        flash('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
        return redirect(url_for('manage_questions'))
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}')
        return redirect(url_for('edit_question', question_id=question_id))

@app.route('/delete_question/<int:question_id>', methods=['POST'])
@login_required
def delete_question(question_id):
    """‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    try:
        conn = get_db_connection()
        conn.execute('DELETE FROM questions WHERE id = ?', (question_id,))
        conn.commit()
        conn.close()
        flash('‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}')
    
    return redirect(url_for('manage_questions'))

@app.route('/upload_excel', methods=['GET', 'POST'])
@login_required
def upload_excel():
    """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel"""
    if request.method == 'GET':
        categories = get_all_categories()
        return render_template('upload_excel.html', categories=categories)
    
    # Handle POST request
    category_id = request.form.get('category_id')
    
    if 'file' not in request.files:
        flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î')
        return redirect(url_for('upload_excel'))
    
    file = request.files['file']
    
    if file.filename == '':
        flash('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå')
        return redirect(url_for('upload_excel'))
    
    if not category_id:
        flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
        return redirect(url_for('upload_excel'))
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
        df = pd.read_excel(file)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_columns = ['question', 'answer']
        if not all(col in df.columns for col in required_columns):
            flash(f'‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {", ".join(required_columns)}')
            return redirect(url_for('upload_excel'))
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        df = df.dropna(subset=required_columns)
        
        if df.empty:
            flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå')
            return redirect(url_for('upload_excel'))
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = get_db_connection()
        added_count = 0
        
        for _, row in df.iterrows():
            try:
                conn.execute('''
                    INSERT INTO questions (category_id, question, answer) 
                    VALUES (?, ?, ?)
                ''', (category_id, str(row['question']).strip(), str(row['answer']).strip()))
                added_count += 1
            except Exception as e:
                print(f"Error adding question: {e}")
                continue
        
        conn.commit()
        conn.close()
        
        flash(f'‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° {added_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
        
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}')
    
    return redirect(url_for('upload_excel'))

@app.route('/download_template')
@login_required
def download_template():
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Template Excel"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_data = {
        'question': [
            '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ',
            '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á',
            '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà',
            '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
        ],
        'answer': [
            '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
            '‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô Python, Web Development, Data Science',
            '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 2,500 ‡∏ö‡∏≤‡∏ó ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£',
            '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
        ]
    }
    
    df = pd.DataFrame(sample_data)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏ô memory
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='Questions', index=False)
    
    output.seek(0)
    
    return send_file(
        output,
        as_attachment=True,
        download_name='chatbot_template.xlsx',
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

@app.route('/export_questions')
@login_required
def export_questions():
    """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV"""
    questions = get_all_questions()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô memory
    output = io.StringIO()
    writer = csv.writer(output)
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô header
    writer.writerow(['ID', 'Category', 'Question', 'Answer', 'Created', 'Updated'])
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for q in questions:
        writer.writerow([
            q['id'],
            q['category_name'],
            q['question'],
            q['answer'],
            q['created_at'],
            q['updated_at']
        ])
    
    output.seek(0)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á BytesIO ‡∏à‡∏≤‡∏Å StringIO
    csv_output = io.BytesIO()
    csv_output.write(output.getvalue().encode('utf-8-sig'))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° BOM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UTF-8
    csv_output.seek(0)
    
    return send_file(
        csv_output,
        as_attachment=True,
        download_name=f'questions_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
        mimetype='text/csv'
    )

# API Routes

@app.route('/api/health', methods=['GET'])
def api_health():
    """API Health Check"""
    return jsonify({
        'status': 'healthy',
        'message': 'DSD Chatbot API is running on Railway! üöÇ',
        'timestamp': datetime.now().isoformat(),
        'environment': os.environ.get('RAILWAY_ENVIRONMENT', 'development'),
        'railway_info': {
            'deployment_id': os.environ.get('RAILWAY_DEPLOYMENT_ID', 'local'),
            'service_id': os.environ.get('RAILWAY_SERVICE_ID', 'local'),
            'no_cold_start': True
        },
        'features': [
            'No Cold Start',
            'Fast Response',
            'SSL/HTTPS',
            'Auto Deploy',
            'CORS Enabled',
            'Database Powered'
        ],
        'endpoints': ['/api/health', '/api/chat', '/api/stats', '/', '/admin']
    })

@app.route('/api/chat', methods=['POST'])
def api_chat():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'No JSON data provided',
                'response': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON',
                'timestamp': datetime.now().isoformat()
            }), 400
        
        message = data.get('message', '').strip()
        user_id = data.get('user_id', 'anonymous')
        session_id = data.get('session_id', 'default')
        
        if not message:
            return jsonify({
                'error': 'Message is required',
                'response': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á',
                'timestamp': datetime.now().isoformat()
            }), 400
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        start_time = datetime.now()
        response_text = find_answer(message)
        end_time = datetime.now()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö
        processing_time = (end_time - start_time).total_seconds() * 1000
        
        return jsonify({
            'response': response_text,
            'html_response': bool('\n' in response_text),
            'user_id': user_id,
            'session_id': session_id,
            'timestamp': datetime.now().isoformat(),
            'processing_time_ms': round(processing_time, 2),
            'railway_info': {
                'deployment_id': os.environ.get('RAILWAY_DEPLOYMENT_ID', 'local'),
                'no_cold_start': True,
                'fast_response': True,
                'database_powered': True
            }
        })
        
    except Exception as e:
        return jsonify({
            'error': 'Internal server error',
            'response': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Railway',
            'timestamp': datetime.now().isoformat(),
            'details': str(e)
        }), 500

@app.route('/api/stats', methods=['GET'])
def api_stats():
    """API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
    try:
        conn = get_db_connection()
        
        total_questions = conn.execute('SELECT COUNT(*) as count FROM questions').fetchone()['count']
        total_categories = conn.execute('SELECT COUNT(*) as count FROM categories').fetchone()['count']
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        questions_by_category = conn.execute('''
            SELECT c.name, COUNT(q.id) as count 
            FROM categories c 
            LEFT JOIN questions q ON c.id = q.category_id 
            GROUP BY c.id, c.name
        ''').fetchall()
        
        conn.close()
        
        return jsonify({
            'total_questions': total_questions,
            'total_categories': total_categories,
            'questions_by_category': [dict(row) for row in questions_by_category],
            'timestamp': datetime.now().isoformat(),
            'railway_info': {
                'platform': 'Railway',
                'deployment_id': os.environ.get('RAILWAY_DEPLOYMENT_ID', 'local'),
                'uptime': '24/7',
                'cold_start': False,
                'database': 'SQLite'
            }
        })
        
    except Exception as e:
        return jsonify({
            'error': 'Database error',
            'timestamp': datetime.now().isoformat(),
            'details': str(e)
        }), 500

# Initialize database on startup
init_db()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    
    print("üöÇ" + "="*60)
    print("üöÇ DSD Chatbot Admin System Starting...")
    print(f"üì° Port: {port}")
    print(f"üåç Environment: {os.environ.get('RAILWAY_ENVIRONMENT', 'local')}")
    print("‚úÖ No Cold Start")
    print("‚úÖ Database Powered")
    print("‚úÖ Admin Dashboard")
    print("‚úÖ Excel Import/Export")
    print("‚úÖ Full CRUD Operations")
    print("üöÇ" + "="*60)
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )